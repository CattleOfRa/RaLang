token		::= keyword  | module   | mainfunc | function;
keyword     ::= print;

(* Building blocks *)
space		::= " ";
indent      ::= #'\s{4}';
eq          ::= "=";
id      	::= #'\w+';
variable	::= datatype <space+> id <space*> <eq> <space*> expr;

(* Maths expressions - InstaParse example *)
expr = add-sub
<add-sub> = mul-div | add | sub
add = add-sub <'+'> mul-div
sub = add-sub <'-'> mul-div
<mul-div> = term | mul | div
mul = mul-div <'*'> term
div = mul-div <'/'> term
<term> = num | <'('> add-sub <')'>

(* Data types *)
datatype	::= "int" | "float" | "string" | "[" <space*> datatype <space*> "]";
num 		::= int | float;
int		    ::= #'-?\d+';
float		::= #'-?\d+\.\d+';
string      ::= #'".*"';
<intString> ::= #'"-?\d+"';
<fltString> ::= #'"-?\d+.\d+"';

(* Modules *)
module		::= <"module"> <space+> modulename;
modulename  ::= id;

(* Functions *)
mainfunc    ::= <"function main:">;
function    ::= <"function"> <space+> funcname <space*> "(" params "):";
funcname    ::= id;
params      ::= datatype <space+> id;

(* Keyword's definition *)
print       ::= <indent> <"print"> <space+> (string | expr);

(* No longer in use *)

(* Maths expressions - Idea taken from the Dragon Book
expr		::= expr add term | expr sub term | term;
term		::= term mul factor | term div factor | factor;
factor		::= num | '(' expr ')' | variable; *)

(* Operators 
add 		::= <space* "+" space*>;
sub 		::= <space* "-" space*>;
mul 		::= <space* "*" space*>;
div 		::= <space* "/" space*>; *)