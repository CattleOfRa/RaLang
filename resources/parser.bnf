token		::= keyword | factor;
keyword     ::= module | mainfunc | function | print;

(* Building blocks *)
space		::= " ";
indent      ::= #'\s{4}';
eq          ::= "=";
id      	::= #'\w+';
variable	::= datatype <space+> id <space*> <eq> <space*> expr;

(* Maths expressions *)
expr		::= expr add term | expr sub term | <space*> term <space*>;
term		::= term mul factor | term div factor | <space*> factor <space*>;
factor		::= num | '(' expr ')' | variable;

(* Data types *)
datatype	::= "int" | "float" | "string" | "[" <space*> datatype <space*> "]";
num 		::= int | float;
<int>		::= #'-?\d+';
<float>		::= #'-?\d+\.\d+';
<string>    ::= #'".*"';

(* Operators *)
add 		::= <space*> "+" <space*>;
sub 		::= <space*> "-" <space*>;
mul 		::= <space*> "*" <space*>;
div 		::= <space*> "/" <space*>;

(* Modules *)
module		::= <"module"> <space+> modulename;
modulename  ::= id;

(* Functions *)
mainfunc    ::= <"function main:">;
function    ::= <"function"> <space+> funcname <space*> "(" params "):";
funcname    ::= id;
params      ::= datatype <space+> id;

(* Keyword's definition *)
print       ::= <indent> <"print"> <space+> string;